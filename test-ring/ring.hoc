{load_file("cell.hoc")}

begintemplate Ring
public cells, nclist, stim, ncstim, tvec, idvec
objref cells, nclist, stim, ncstim, tvec, idvec
objref pc

proc init() {
	pc = new ParallelContext()
	ncell = $1
	delay = $2
	mkring()
	mkstim()
	spike_record()
}

proc mkring() {
	mkcells()
	connectcells()
}

iterator pcitr() {local i
	for (i = pc.id; i < ncell; i += pc.nhost) {
		$&1 = i
		iterator_statement
	}
}

proc mkcells() {local i  localobj cell, nc, nil
	cells = new List()
	for pcitr(&i) {
		cell = new B_BallStick()
		cells.append(cell)
		pc.set_gid2node(i, pc.id)
		nc = cell.connect2target(nil)
		pc.cell(i, nc)
	}
}

proc connectcells() {local i, targid  localobj target, syn, nc
	nclist = new List()
	for i=0, ncell-1 {
		targid = (i+1)%ncell
		if (pc.gid_exists(targid)) {
			target = pc.gid2cell(targid)
			syn = target.synlist.o(0)
			nc = pc.gid_connect(i, syn)
			nclist.append(nc)
			nc.delay = delay
			nc.weight = 0.01
		}
	}
}
		
proc mkstim() {
	if (pc.gid_exists(0)) {
		stim = new NetStim()
		stim.number = 1
		stim.start = 0
		ncstim = new NetCon(stim, pc.gid2cell(0).synlist.o(0))
		ncstim.delay = 0
		ncstim.weight = 0.01
	}
}

proc spike_record() {local i
	tvec = new Vector()
	idvec = new Vector()
	for pcitr(&i) {
		pc.spike_record(i, tvec, idvec)
	}
}

endtemplate Ring

func runring() {local id, n, spkcnt, tmax, idmax  localobj ring, tt, idv, pc
	id = hoc_ac_
	ring = new Ring($1, $2)
	pc = new ParallelContext()
	pc.set_maxstep(10)
	stdinit()
	pc.psolve($3)
	n = ring.tvec.size
	spkcnt = pc.allreduce(n, 1)
	tmax = pc.allreduce(ring.tvec.x[n-1], 2)
	tt = new Vector()
	idv = new Vector()
	pc.allgather(ring.tvec.x[n-1], tt)
	pc.allgather(ring.idvec.x[n-1], idv)
	idmax = idv.x[tt.max_ind]
	pc.post(id, spkcnt, tmax, idmax)
	pc.gid_clear()
	return id
}
